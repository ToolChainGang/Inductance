#!/usr/bin/env python3
#
########################################################################################################################
########################################################################################################################
##
##      Copyright (C) 2020 Peter Walsh, Milford, NH 03055
##      All Rights Reserved under the MIT license as outlined below.
##
##  FILE
##      CoilCalc
##
##  DESCRIPTION
##      Calculate and print coil parameters (inductance, Q, capacitance, et al)
##
##  USAGE
##      See the PrintUsage() function below.
##
########################################################################################################################
########################################################################################################################
##
##  MIT LICENSE
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy of
##    this software and associated documentation files (the "Software"), to deal in
##    the Software without restriction, including without limitation the rights to
##    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
##    of the Software, and to permit persons to whom the Software is furnished to do
##    so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in
##    all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
##    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
##    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
##    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
##    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
########################################################################################################################
########################################################################################################################

import sys, getopt, signal

sys.path.append('../lib')

from Coil import Coil
import pprint

########################################################################################################################
########################################################################################################################
##
## Data declarations
##
########################################################################################################################
########################################################################################################################

D = 0   # Diameter of coil, in mm
l = 0   # Length of coil  , in mm
d = 0   # Diameter of wire, in mm
N = 0   # Number of turns
f = 0   # Frequency of interest in MHz
p = 0   # Index into plating table
            #   =0 annealed copper
            #   =1 hard-drawn copper
            #   =2 silver
            #   =3 aluminium

verbose = False     # Set True to print debugging info

def PrintUsage():
    print()
    print("Usage: ")
    print()
    print('    CoilCalc --D=<coil-dia-mm> --l=<coil-len-mm> --N=<turns> --d=<wire-dia-mm> --f=<freq-mhz> [--p=<plating-index>]')
    print()
    print("Where:")
    print()
    print("    --D=<coil-dia-mm>        Coil diameter, in mm")
    print("    --l=<coil-len-mm>        Coil length  , in mm")
    print("    --N=<num-turns>          Coil turns")
    print("    --d=<wire-dia-mm>        Wire diameter, in mm")
    print("    --d=<some-number>AWG     Wire specified as AWG")
    print("    --f=<freq-mhz>           Frequency of interest")
    print()
    print("    --p=<plating-index>      (OPTIONAL) Wire plating")
    print("             =0                  annealed copper (DEFAULT)")
    print("             =1                  hard-drawn copper")
    print("             =2                  silver")
    print("             =3                  aluminium")
    print()
    print("    --help                   Print this message and exit")
    print("    --verbose                Print coil debug info")

def ErrorExit(Msg):
    print()
    print("*** " + Msg + " ***")
    PrintUsage()
    print()
    sys.exit(2)


########################################################################################################################
########################################################################################################################
#
# CoilCalc - Print coil parameters for specific, known coil
#
# Inputs:   See Usage() above.
#
# Outputs:  None. Program output is printed to terminal
#
def CoilCalc():
    global D, N, l, d, f, p, verbose

    ParseCommandLine()

    TestCoil = Coil(D,N,l,d,f,p)

    #
    # Prettyprint doesn't handle newlines correctly - print the text box separately using normal print
    #
    Summary = TestCoil.summary
    TestCoil.summary = ""

    if verbose:
        pprint.pprint(TestCoil)

    print(Summary)
    print()


########################################################################################################################
########################################################################################################################
#
# ParseCommandLine - Grab command line parameters and do some cursory validation
#
# Inputs:   None. Uses command line arguments (ie: sys.argv)
#
# Outputs:  Global vars above are set from command line arguments
#
def ParseCommandLine():
    global D, N, l, d, f, p, verbose

    #
    # Comversion from AWG to wire diameters in mm for AWG 0 through 40 inclusive.
    #
    AWGmm = [ 8.2525, 7.3482, 6.5430, 5.8268, 5.1892, 4.6203, 4.1148, 3.6652, 
              3.2639, 2.9058, 2.5883, 2.3038, 2.0523, 1.8288, 1.6281, 1.4503, 
              1.2903, 1.1506, 1.0236, 0.9119, 0.8128, 0.7239, 0.6452, 0.5740, 
              0.5105, 0.4547, 0.4039, 0.3607, 0.3200, 0.2870, 0.2540, 0.2261, 
              0.2032, 0.1803, 0.1600, 0.1422, 0.1270, 0.1143, 0.1016, 0.0889, 
              0.0787 ]

    try:
        opts, args = getopt.getopt(sys.argv[1:],
                                    "",["D=",
                                        "N=",
                                        "l=",
                                        "d=",
                                        "f=",
                                        "p=",
                                        "help",
                                        "verbose"
                                        ])

    except getopt.GetoptError:
        ErrorExit("Unknown or malformed arguments")

    try:
        for opt, arg in opts:
            if   opt in ('--verbose'):
                verbose = True

            elif opt in ('--help'):
                PrintUsage()
                sys.exit()

            elif opt in ("--D"):
                D = float(arg)

            elif opt in ("--N"):
                N = float(arg)

            elif opt in ("--l"):
                l = float(arg)

            elif opt in ("--d"):
                if arg[-3:] == "AWG":
                    AWG = int(arg[0:len(arg)-3])

                    if AWG < 0 or AWG > 40:
                        ErrorExit("AWG must be in range 0..40")

                    d = AWGmm[AWG]
#                    print("AWG " + str(AWG) + "=>" + str(d) + "mm\n")

                else:
                    d = float(arg)

            elif opt in ("--f"):
                f = float(arg)

            elif opt in ("--p"):
                p = int(arg)

                if p < 0 or p > 3:
                    ErrorExit("Plating must be in range 0..3")

            else:
                ErrorExit("Unknown argument: " + opt)

    except ValueError as Error:
        ErrorExit(Error.args[0])

    if D == 0:
        ErrorExit("Coil diameter not specified.")

    if N == 0:
        ErrorExit("Number of turns not specified.")

    if l == 0:
        ErrorExit("Coil length not specified.")

    if d == 0:
        ErrorExit("Wire diameter not specified.")

    if f == 0:
        ErrorExit("Frequency not specified.")

    if N*d >= l:
        ErrorExit("More turns (of that wire) than can fit in specified length.")


########################################################################################################################
########################################################################################################################
#
# Allow Ctrl-C to terminate the program. Python is crazy stupid for the simplest things.
#
# Note: Win32 section is untested.
#
def CtrlC_Handler(sig, frame):
#    print('Ctrl-C!')
    print()
    import os
    os._exit(0)

if sys.platform == "win32":
    import win32api
    win32api.SetConsoleCtrlHandler(CtrlC_Handler, True)
else:
    signal.signal(signal.SIGINT, CtrlC_Handler)


########################################################################################################################
########################################################################################################################
#
if __name__ == "__main__":
   CoilCalc()
